/**
 * Defines dependencies and versions shared across modules.
 *
 * Multiple dependencies can be shared under the same name:
 *   spring: [
 *     "org.springframework:spring-core:${versions.spring}",
 *     "org.springframework:spring-jdbc:${versions.spring}"
 *   ]
 *
 * Use DependencyHandler.create for advanced dependency configuration:
 *   dependencies.create("org.springframework:spring-core:3.1") {*     // Force a version in case of the conflict
 *     force = true
 *
 *     // Disable all transitive dependencies
 *     transitive = false
 *
 *     // exclude a transitive dependency
 *     exclude module: "org.unwanted:unwantedModule" // by group & name
 *     exclude module: "unwantedModule"              // by artifact name
 *     exclude group:  "org.unwanted'                // by artifact group
 *}*
 * @see https://gradle.org/docs/current/javadoc/org/gradle/api/artifacts/dsl/DependencyHandler.html
 */
ext {
    versions = [
            errorprone      : '2.13.1',
            expiringMap     : '0.5.10',
            flipTables      : '1.1.0',
            googleJavaFormat: '1.14.0',
            guava           : '31.1-jre',
            jamm            : '0.3.3',
            javaObjectLayout: '0.16',
            javapoet        : '1.13.0',
            jcache          : '1.1.1',
            jmh             : '1.34',
            jsr330          : '1',
            nullaway        : '0.9.5',

    ]
    testVersions = [
            awaitility             : '4.1.1',
            commonsCollectionsTests: '4.4',
            eclipseCollections     : '11.0.0',
            guice                  : '5.1.0',
            hamcrest               : '2.2',
            jcacheTck              : '1.1.1',
            jctools                : '3.3.0',
            junitPlatformLauncher  : '1.8.2',
            junitJupiterEngine     : '5.8.2',
            junitJupiter           : '5.7.2',
            lincheck               : '2.14.1',
            mockito                : '4.3.1',
            paxExam                : '4.13.5',
            slf4jTest              : '2.5.0',
            testng                 : '7.5',
            truth                  : '1.1.3',
            felix                  : '7.0.3',
            felixScr               : '2.2.0',
            osgiUtilFunction       : '1.2.0',
            osgiUtilPromise        : '1.2.0',
    ]
    pluginVersions = [
            bnd               : '6.2.0',
            checkstyle        : '10.0',
            coveralls         : '2.12.0',
            errorprone        : '2.0.2',
            findsecbugs       : '1.11.0',
            jacoco            : '0.8.7',
            jmh               : '0.6.6',
            jmhReport         : '0.9.0',
            nexusPublish      : '1.1.0',
            nullaway          : '1.3.0',
            pmd               : '6.43.0',
            semanticVersioning: '1.1.0',
            shadow            : '7.1.2',
            snyke             : '0.4',
            sonarqube         : '3.3',
            spotbugs          : '4.5.3',
            spotbugsContrib   : '7.4.7',
            spotbugsPlugin    : '5.0.6',
            stats             : '0.47.0',
            versions          : '0.42.0',
    ]
    annotationProcessorVersions = [
            autoValue       : '1.9',
            autoValueBuilder: '2.9.3',
    ]

    libraries = [
            concurrentlinkedhashmap: "com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:${versions.concurrentlinkedhashmap}",
            config                 : "com.typesafe:config:${versions.config}",
            ehcache3               : "org.ehcache:ehcache:${versions.ehcache3}",
            errorproneAnnotations  : "com.google.errorprone:error_prone_annotations:${versions.errorprone}",
            errorproneCore         : "com.google.errorprone:error_prone_core:${versions.errorprone}",
            expiringMap            : "net.jodah:expiringmap:${versions.expiringMap}",
            googleJavaFormat       : "com.google.googlejavaformat:google-java-format:${versions.googleJavaFormat}",
            guava                  : "com.google.guava:guava:${versions.guava}",
            jamm                   : "com.github.jbellis:jamm:${versions.jamm}",
            javaObjectLayout       : "org.openjdk.jol:jol-cli:${versions.javaObjectLayout}",
            javapoet               : "com.squareup:javapoet:${versions.javapoet}",
            jcache                 : "javax.cache:cache-api:${versions.jcache}",
            jsr330                 : "javax.inject:javax.inject:${versions.jsr330}",
            nullaway               : "com.uber.nullaway:nullaway:${versions.nullaway}",
            ohc                    : "org.caffinitas.ohc:ohc-core-j8:${versions.ohc}",
            picocli                : "info.picocli:picocli:${versions.picocli}",
            slf4jNop               : [
                    "org.slf4j:slf4j-nop:${versions.slf4j}",
                    "org.slf4j:slf4j-jdk-platform-logging:${versions.slf4j}",
            ],
            slf4jJdk               : [
                    "org.slf4j:slf4j-jdk14:${versions.slf4j}",
                    "org.slf4j:slf4j-jdk-platform-logging:${versions.slf4j}",
            ],
            hutool                 : "cn.hutool:hutool-core:5.7.20",
            caffeine               : "com.github.ben-manes.caffeine:caffeine:3.0.5",
            lombok                 : "org.projectlombok:lombok:1.18.22",
            log4j                  : [
                    "org.apache.logging.log4j:log4j-core:2.17.1",
                    "org.apache.logging.log4j:log4j-api:2.17.1",
                    "org.apache.logging.log4j:log4j-slf4j-impl:2.17.1"
            ],
            springframework        : "org.springframework:spring-core:5.3.15",
            javassist              : "org.javassist:javassist:3.28.0-GA",
            dom4j                  : "org.dom4j:dom4j:2.1.3",
            reflections            : "org.reflections:reflections:0.9.11",
            tcache                 : "com.trivago:triava:${versions.tcache}",
            stream                 : "com.clearspring.analytics:stream:${versions.stream}",
            univocityParsers       : "com.univocity:univocity-parsers:${versions.univocityParsers}",
            ycsb                   : dependencies.create("site.ycsb:core:${versions.ycsb}") {
                transitive = false
            },
    ]
    testLibraries = [
            awaitility               : "org.awaitility:awaitility:${testVersions.awaitility}",
            commonsCollectionsTests  : [
                    "org.apache.commons:commons-collections4:${testVersions.commonsCollectionsTests}",
                    "org.apache.commons:commons-collections4:${testVersions.commonsCollectionsTests}:tests",
            ],
            eclipseCollectionsTestLib: "org.eclipse.collections:eclipse-collections-testutils:${testVersions.eclipseCollections}",
            guavaTestLib             : "com.google.guava:guava-testlib:${versions.guava}",
            hamcrest                 : "org.hamcrest:hamcrest:${testVersions.hamcrest}",
            jcacheGuice              : "org.jsr107.ri:cache-annotations-ri-guice:${versions.jcache}",
            jcacheTck                : "javax.cache:cache-tests:${testVersions.jcacheTck}",
            jcacheTckTests           : "javax.cache:cache-tests:${testVersions.jcacheTck}:tests",
            jctools                  : "org.jctools:jctools-core:${testVersions.jctools}",
            junit                    : [
                    "org.junit.platform:junit-platform-launcher:1.8.2",
                    "org.junit.jupiter:junit-jupiter-engine:5.8.2",
                    "org.junit.jupiter:junit-jupiter:5.7.2"
            ],
            lincheck                 : "org.jetbrains.kotlinx:lincheck-jvm:${testVersions.lincheck}",
            mockito                  : "org.mockito:mockito-core:${testVersions.mockito}",
            osgiCompile              : "org.ops4j.pax.exam:pax-exam-junit4:${testVersions.paxExam}",
            osgiRuntime              : [
                    "org.apache.felix:org.apache.felix.framework:${testVersions.felix}",
                    "org.apache.felix:org.apache.felix.scr:${testVersions.felixScr}",
                    "org.osgi:org.osgi.util.function:${testVersions.osgiUtilFunction}",
                    "org.osgi:org.osgi.util.promise:${testVersions.osgiUtilPromise}",
                    "org.ops4j.pax.exam:pax-exam-container-native:${testVersions.paxExam}",
                    "org.ops4j.pax.exam:pax-exam-link-mvn:${testVersions.paxExam}",
                    'org.ops4j.pax.url:pax-url-aether:2.6.7',
            ],
            slf4jTest                : [
                    "com.github.valfirst:slf4j-test:${testVersions.slf4jTest}",
                    "org.slf4j:slf4j-jdk-platform-logging:${versions.slf4j}",
            ],
            testng                   : [
                    "org.testng:testng:${testVersions.testng}",
                    "com.google.inject:guice:${testVersions.guice}",
                    'org.ow2.asm:asm:9.2',
            ],
            truth                    : [
                    "com.google.truth:truth:${testVersions.truth}",
                    "com.google.truth.extensions:truth-java8-extension:${testVersions.truth}"
            ],
    ]
    gradlePlugins = [
            bnd               : "biz.aQute.bnd:biz.aQute.bnd.gradle:${pluginVersions.bnd}",
            checkstyle        : dependencies.create("com.puppycrawl.tools:checkstyle:${pluginVersions.checkstyle}") {
                transitive = false
            },
            coveralls         : "gradle.plugin.org.kt3k.gradle.plugin:coveralls-gradle-plugin:${pluginVersions.coveralls}",
            errorprone        : "net.ltgt.gradle:gradle-errorprone-plugin:${pluginVersions.errorprone}",
            findsecbugs       : "com.h3xstream.findsecbugs:findsecbugs-plugin:${pluginVersions.findsecbugs}",
            jmh               : [
                    "me.champeau.jmh:jmh-gradle-plugin:${pluginVersions.jmh}",
                    "org.openjdk.jmh:jmh-core:${versions.jmh}",
            ],
            jmhReport         : "gradle.plugin.io.morethan.jmhreport:gradle-jmh-report:${pluginVersions.jmhReport}",
            nexusPublish      : "io.github.gradle-nexus:publish-plugin:${pluginVersions.nexusPublish}",
            nullaway          : "net.ltgt.gradle:gradle-nullaway-plugin:${pluginVersions.nullaway}",
            pmd               : "net.sourceforge.pmd:pmd:${pluginVersions.pmd}",

            semanticVersioning: "io.ehdev:gradle-semantic-versioning:${pluginVersions.semanticVersioning}",
            shadow            : "gradle.plugin.com.github.johnrengelman:shadow:${pluginVersions.shadow}",
            snyke             : "gradle.plugin.io.snyk.gradle.plugin:snyk:${pluginVersions.snyke}",
            sonarqube         : "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${pluginVersions.sonarqube}",
            spotbugs          : "com.github.spotbugs:spotbugs:${pluginVersions.spotbugs}",
            spotbugsContrib   : "com.mebigfatguy.sb-contrib:sb-contrib:${pluginVersions.spotbugsContrib}",
            spotbugsPlugin    : "com.github.spotbugs.snom:spotbugs-gradle-plugin:${pluginVersions.spotbugsPlugin}",
            stats             : "org.kordamp.gradle:sourcestats-gradle-plugin:${pluginVersions.stats}",
            versions          : "com.github.ben-manes:gradle-versions-plugin:${pluginVersions.versions}",
    ]
    annotationProcessors = [
            autoValue: [
                    "com.google.auto.value:auto-value:${annotationProcessorVersions.autoValue}",
                    "com.github.h908714124:auto-builder:${annotationProcessorVersions.autoValueBuilder}",
                    "com.google.auto.value:auto-value-annotations:${annotationProcessorVersions.autoValue}",
            ],
    ]
}
